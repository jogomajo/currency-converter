{"version":3,"sources":["components/Nav/Nav.tsx","components/Converter/subcomponents/AmountInput.tsx","components/Converter/subcomponents/RatioBox.tsx","store/types.ts","store/actions.ts","utils/utils.tsx","components/Converter/subcomponents/NameInput.tsx","api/index.ts","components/Converter/Converter.tsx","components/Charts/subcomponents/DateSpanBar.tsx","components/Charts/subcomponents/CurrenciesSelect.tsx","components/Charts/Charts.tsx","App.tsx","store/reducer.ts","index.tsx","store/index.ts"],"names":["useStyles","makeStyles","containerRoot","maxWidth","backgroundColor","boxShadow","position","zIndex","tabRoot","fontWeight","color","tabSelected","tabsRoot","margin","tabsIndicator","Nav","useState","value","setValue","classes","Container","root","Tabs","onChange","event","newValue","variant","indicator","Tab","icon","Repeat","label","selected","component","Link","to","Timeline","fontSize","borderColor","borderWidth","AmountInput","valueSetter","activeInput","setActiveInput","TextField","id","type","setAmount","toString","startsWith","validateAmount","target","size","paperRoot","marginTop","padding","typographyRoot","marginBottom","connect","state","firstCurrencyAbbreviation","firstCurrencyName","secondCurrencyAbbreviation","secondCurrencyName","rates","Paper","elevation","Typography","align","toFixed","SET_CURRENCIES_NAMES","SET_FIRST_CURRENCY_NAME","SET_SECOND_CURRENCY_NAME","setFirstCurrencyName","setSecondCurrencyName","renderCurrenciesNames","whichSelect","currenciesNames","names","Object","entries","filter","name","map","MenuItem","width","height","mapDispatchToProps","select","onChangeCurrencyNameHandler","URL","fetchCurrenciesNames","a","axios","get","data","console","log","fetchCurrenciesRates","fetchTimeSeries","firstCurrency","secondCurrency","span","calculateStartDate","modifiedRates","date","rate","now","dayjs","year","subtract","month","day","firstCurrencyAmount","setFirstCurrencyAmount","secondCurrencyAmount","setSecondCurrencyAmount","currenciesRates","setCurrenciesRates","useEffect","fetchedRates","parseFloat","Grid","container","item","spacing","justify","alignItems","CircularProgress","thickness","MyTab","withStyles","DateSpanBar","setDateSpan","spanSelectActive","setSpanSelectActive","onClick","selectRoot","buttonRoot","IconButton","SwapHoriz","display","flexDirection","justifyContent","chartWrapperRoot","dataSeries","setDataSeries","dateSpan","fetchedDataSeries","labels","datasets","fill","options","title","text","fontColor","legend","tooltips","mode","intersect","scales","xAxes","ticks","maxTicksLimit","labelOffset","maxRotation","yAxes","setCurrenciesNames","fetchedData","exact","from","path","render","initialState","USD","EUR","currencyReducer","action","store","createStore","composeWithDevTools","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1e68d873.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Tabs, Tab, Container, makeStyles } from '@material-ui/core';\r\nimport { Timeline, Repeat } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles({\r\n  containerRoot: {\r\n    maxWidth: '100vw',\r\n    backgroundColor: '#282c34',\r\n    boxShadow: '0 8px 6px -6px #333',\r\n    position: 'relative',\r\n    zIndex: 1,\r\n  },\r\n  tabRoot: {\r\n    fontWeight: 700,\r\n    color: '#aaa',\r\n  },\r\n  tabSelected: {\r\n    color: 'orange',\r\n  },\r\n  tabsRoot: {\r\n    maxWidth: 600,\r\n    margin: '0 auto',\r\n  },\r\n  tabsIndicator: {\r\n    backgroundColor: 'orange',\r\n  },\r\n});\r\n\r\nconst Nav: React.FC = () => {\r\n  const [value, setValue] = useState(0);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => setValue(newValue);\r\n\r\n  return (\r\n    <Container\r\n      classes={{\r\n        root: classes.containerRoot,\r\n      }}\r\n    >\r\n      <Tabs\r\n        value={value}\r\n        onChange={handleChange}\r\n        variant=\"fullWidth\"\r\n        classes={{\r\n          root: classes.tabsRoot,\r\n          indicator: classes.tabsIndicator,\r\n        }}\r\n      >\r\n        <Tab\r\n          icon={<Repeat />}\r\n          label=\"CONVERT\"\r\n          classes={{\r\n            root: classes.tabRoot,\r\n            selected: classes.tabSelected,\r\n          }}\r\n          component={Link}\r\n          to=\"/converter\"\r\n        />\r\n\r\n        <Tab\r\n          icon={<Timeline />}\r\n          label=\"CHARTS\"\r\n          classes={{\r\n            root: classes.tabRoot,\r\n            selected: classes.tabSelected,\r\n          }}\r\n          component={Link}\r\n          to=\"/charts\"\r\n        />\r\n      </Tabs>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import { TextField, makeStyles } from '@material-ui/core';\r\n\r\ninterface IProps {\r\n  value: number;\r\n  valueSetter: (value: number) => void;\r\n  activeInput: string;\r\n  setActiveInput: (value: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    '& label': {\r\n      color: '#ddd',\r\n    },\r\n    '& input': {\r\n      fontWeight: 700,\r\n      fontSize: 24,\r\n    },\r\n    '&:hover label': {\r\n      color: '#F7B05B',\r\n    },\r\n    '& label.Mui-focused': {\r\n      color: '#F7B05B',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#888',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#F7B05B',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#F7B05B',\r\n        borderWidth: 1,\r\n      },\r\n    },\r\n    '& .MuiSelect-outlined': {\r\n      fontWeight: 700,\r\n    },\r\n  },\r\n});\r\n\r\nconst AmountInput: React.FC<IProps> = ({ value, valueSetter, activeInput, setActiveInput }) => {\r\n  const classes = useStyles();\r\n\r\n  const validateAmount = (value: number, setAmount: (value: number) => void) => {\r\n    if (value < 0 || value.toString().startsWith('0')) return;\r\n\r\n    setAmount(value);\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      id={`${activeInput}-currency-amount`}\r\n      label=\"amount\"\r\n      variant=\"outlined\"\r\n      type=\"number\"\r\n      onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\r\n        validateAmount(event.target.value as number, valueSetter);\r\n        setActiveInput(activeInput);\r\n      }}\r\n      value={value}\r\n      size=\"medium\"\r\n      classes={{\r\n        root: classes.root,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AmountInput;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Typography, Paper, makeStyles } from '@material-ui/core';\r\n\r\nimport { AppState } from '../../../store';\r\n\r\ninterface IProps {\r\n  firstCurrencyAbbreviation: string;\r\n  secondCurrencyAbbreviation: string;\r\n  rates: { [key: string]: number };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  paperRoot: {\r\n    backgroundColor: '#3a4253',\r\n    marginTop: 200,\r\n    padding: '40px 60px',\r\n  },\r\n  typographyRoot: {\r\n    color: '#F7B05B',\r\n    '&:first-child': {\r\n      marginBottom: 20,\r\n    },\r\n  },\r\n});\r\n\r\nconst RatioBox: React.FC<IProps> = ({\r\n  firstCurrencyAbbreviation,\r\n  secondCurrencyAbbreviation,\r\n  rates,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const firstPairRate = () => rates[secondCurrencyAbbreviation].toFixed(4);\r\n  const secondPairRate = () => (1 / rates[secondCurrencyAbbreviation]).toFixed(4);\r\n\r\n  return (\r\n    <Paper elevation={3} variant=\"elevation\" classes={{ root: classes.paperRoot }}>\r\n      <Typography\r\n        variant=\"h5\"\r\n        align=\"center\"\r\n        classes={{ root: classes.typographyRoot }}\r\n      >{`1 ${firstCurrencyAbbreviation} = ${firstPairRate()} ${secondCurrencyAbbreviation}`}</Typography>\r\n      <Typography\r\n        variant=\"h5\"\r\n        align=\"center\"\r\n        classes={{ root: classes.typographyRoot }}\r\n      >{`1 ${secondCurrencyAbbreviation} = ${secondPairRate()} ${firstCurrencyAbbreviation}`}</Typography>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    firstCurrencyAbbreviation: state.firstCurrencyName,\r\n    secondCurrencyAbbreviation: state.secondCurrencyName,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(RatioBox);\r\n","export interface CurrenciesGlobalState {\r\n  currenciesNames: {\r\n    [key: string]: string;\r\n  };\r\n  firstCurrencyName: string;\r\n  secondCurrencyName: string;\r\n}\r\n\r\nexport const SET_CURRENCIES_NAMES = 'SET_CURRENCIES_NAMES';\r\nexport const SET_FIRST_CURRENCY_NAME = 'SET_FIRST_CURRENCY_NAME';\r\nexport const SET_SECOND_CURRENCY_NAME = 'SET_SECOND_CURRENCY_NAME';\r\n\r\ninterface SetCurrenciesNames {\r\n  type: typeof SET_CURRENCIES_NAMES;\r\n  currenciesNames: { [key: string]: string };\r\n}\r\n\r\ninterface SetFirstCurrencyName {\r\n  type: typeof SET_FIRST_CURRENCY_NAME;\r\n  firstCurrencyName: string;\r\n}\r\n\r\ninterface SetSecondCurrencyName {\r\n  type: typeof SET_SECOND_CURRENCY_NAME;\r\n  secondCurrencyName: string;\r\n}\r\n\r\nexport type CurrenciesGlobalStateActionTypes =\r\n  | SetCurrenciesNames\r\n  | SetFirstCurrencyName\r\n  | SetSecondCurrencyName;\r\n","import { SET_CURRENCIES_NAMES, SET_FIRST_CURRENCY_NAME, SET_SECOND_CURRENCY_NAME } from './types';\r\n\r\nexport const setCurrenciesNames = (currenciesNames: { [key: string]: string } | undefined) => {\r\n  return {\r\n    type: SET_CURRENCIES_NAMES,\r\n    currenciesNames,\r\n  };\r\n};\r\n\r\nexport const setFirstCurrencyName = (firstCurrencyName: string) => {\r\n  return {\r\n    type: SET_FIRST_CURRENCY_NAME,\r\n    firstCurrencyName,\r\n  };\r\n};\r\n\r\nexport const setSecondCurrencyName = (secondCurrencyName: string) => {\r\n  return {\r\n    type: SET_SECOND_CURRENCY_NAME,\r\n    secondCurrencyName,\r\n  };\r\n};\r\n","import { MenuItem } from '@material-ui/core';\r\n\r\nexport const renderCurrenciesNames = (\r\n  whichSelect: string,\r\n  currenciesNames: {\r\n    [key: string]: string;\r\n  },\r\n  firstCurrencyName: string,\r\n  secondCurrencyName: string\r\n) => {\r\n  let names = Object.entries(currenciesNames);\r\n\r\n  if (whichSelect === 'first') names = names.filter((name) => name[0] !== secondCurrencyName);\r\n  if (whichSelect === 'second') names = names.filter((name) => name[0] !== firstCurrencyName);\r\n\r\n  return names.map((name) => (\r\n    <MenuItem key={name[1]} value={name[0]}>\r\n      {name[1]}\r\n    </MenuItem>\r\n  ));\r\n};\r\n","import { TextField, makeStyles } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { AppState } from '../../../store';\r\nimport { setFirstCurrencyName, setSecondCurrencyName } from '../../../store/actions';\r\nimport { renderCurrenciesNames } from '../../../utils/utils';\r\n\r\ninterface IProps {\r\n  whichSelect: string;\r\n  currenciesNames: {\r\n    [key: string]: string;\r\n  };\r\n  firstCurrencyName: string;\r\n  setFirstCurrencyName: (name: string) => void;\r\n  secondCurrencyName: string;\r\n  setSecondCurrencyName: (name: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    '& label': {\r\n      color: '#ddd',\r\n    },\r\n    '&:hover label': {\r\n      color: '#F7B05B',\r\n    },\r\n    '& label.Mui-focused': {\r\n      color: '#F7B05B',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      width: 200,\r\n      height: 65.5,\r\n      '& fieldset': {\r\n        borderColor: '#888',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#F7B05B',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#F7B05B',\r\n        borderWidth: 1,\r\n      },\r\n    },\r\n    '& .MuiSelect-outlined': {\r\n      fontWeight: 700,\r\n    },\r\n  },\r\n});\r\n\r\nconst NameInput: React.FC<IProps> = ({\r\n  whichSelect,\r\n  currenciesNames,\r\n  firstCurrencyName,\r\n  setFirstCurrencyName,\r\n  secondCurrencyName,\r\n  setSecondCurrencyName,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const onChangeCurrencyNameHandler = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    if (whichSelect === 'first') {\r\n      setFirstCurrencyName(event.target.value as string);\r\n    } else {\r\n      setSecondCurrencyName(event.target.value as string);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      select\r\n      label=\"name\"\r\n      value={whichSelect === 'first' ? firstCurrencyName : secondCurrencyName}\r\n      onChange={(event) => {\r\n        onChangeCurrencyNameHandler(event);\r\n      }}\r\n      variant=\"outlined\"\r\n      classes={{\r\n        root: classes.root,\r\n      }}\r\n    >\r\n      {renderCurrenciesNames(whichSelect, currenciesNames, firstCurrencyName, secondCurrencyName)}\r\n    </TextField>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    currenciesNames: state.currenciesNames,\r\n    firstCurrencyName: state.firstCurrencyName,\r\n    secondCurrencyName: state.secondCurrencyName,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setFirstCurrencyName,\r\n  setSecondCurrencyName,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NameInput);\r\n","import axios from 'axios';\r\nimport dayjs from 'dayjs';\r\n\r\nconst URL = 'https://api.frankfurter.app';\r\n\r\ninterface Names {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface Rates {\r\n  [key: string]: number;\r\n}\r\n\r\ninterface TimeSeries {\r\n  date: string;\r\n  rate: number;\r\n}\r\n\r\ninterface TimeSeriesRates {\r\n  data: {\r\n    rates: {\r\n      date: {\r\n        [currencyName: string]: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport const fetchCurrenciesNames = async (): Promise<Names | undefined> => {\r\n  try {\r\n    const { data }: { data: Names } = await axios.get(`${URL}/currencies`);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCurrenciesRates = async (\r\n  name: string\r\n): Promise<Rates | undefined> => {\r\n  console.log(name);\r\n\r\n  try {\r\n    const {\r\n      data: { rates },\r\n    }: { data: { rates: Rates } } = await axios.get(\r\n      `${URL}/latest?from=${name}`\r\n    );\r\n\r\n    return rates;\r\n  } catch (error) {\r\n    console.log('error!');\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchTimeSeries = async (\r\n  firstCurrency: string,\r\n  secondCurrency: string,\r\n  span: number\r\n): Promise<TimeSeries[] | undefined> => {\r\n  try {\r\n    const {\r\n      data: { rates },\r\n    }: TimeSeriesRates = await axios.get(\r\n      `${URL}/${calculateStartDate(span)}..?from=${firstCurrency}`\r\n    );\r\n\r\n    const modifiedRates: TimeSeries[] = Object.entries(rates).map((data) => ({\r\n      date: data[0],\r\n      rate: data[1][secondCurrency],\r\n    }));\r\n\r\n    return modifiedRates;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst calculateStartDate = (span: number) => {\r\n  const now = dayjs();\r\n\r\n  const year = now.subtract(span, 'month').year();\r\n  let month: number | string = now.subtract(span, 'month').month() + 1;\r\n  let day: number | string = now.subtract(span, 'month').date();\r\n\r\n  if (month < 10) month = `0${month}`;\r\n  if (day < 10) day = `0${day}`;\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, CircularProgress, makeStyles } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\n\r\nimport AmountInput from './subcomponents/AmountInput';\r\nimport RatioBox from './subcomponents/RatioBox';\r\nimport NameInput from './subcomponents/NameInput';\r\n\r\nimport { fetchCurrenciesRates } from '../../api';\r\nimport { AppState } from '../../store';\r\n\r\ninterface IProps {\r\n  firstCurrencyName: string;\r\n  secondCurrencyName: string;\r\n}\r\n\r\ninterface Rates {\r\n  [key: string]: number;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 600,\r\n    '& .MuiGrid-container:first-of-type': {\r\n      marginBottom: 10,\r\n    },\r\n  },\r\n});\r\n\r\nconst Converter: React.FC<IProps> = ({ firstCurrencyName, secondCurrencyName }) => {\r\n  const [firstCurrencyAmount, setFirstCurrencyAmount] = useState<number>(1);\r\n  const [secondCurrencyAmount, setSecondCurrencyAmount] = useState<number>(1);\r\n  const [currenciesRates, setCurrenciesRates] = useState<Rates | undefined>();\r\n  const [activeInput, setActiveInput] = useState<string>('first');\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const fetchedRates = await fetchCurrenciesRates(firstCurrencyName);\r\n\r\n      setCurrenciesRates(fetchedRates);\r\n    })();\r\n  }, [firstCurrencyName]);\r\n\r\n  useEffect(() => {\r\n    if (currenciesRates) {\r\n      if (activeInput === 'first') {\r\n        const value = parseFloat(\r\n          (firstCurrencyAmount * currenciesRates[secondCurrencyName]).toFixed(2)\r\n        );\r\n\r\n        return setSecondCurrencyAmount(value);\r\n      }\r\n\r\n      if (activeInput === 'second') {\r\n        let value = parseFloat(\r\n          (secondCurrencyAmount * (1 / currenciesRates[secondCurrencyName])).toFixed(2)\r\n        );\r\n\r\n        return setFirstCurrencyAmount(value);\r\n      }\r\n    }\r\n  }, [firstCurrencyAmount, secondCurrencyAmount, secondCurrencyName, currenciesRates, activeInput]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container classes={{ root: classes.root }}>\r\n        <Grid item container spacing={4} justify=\"center\" alignItems=\"center\">\r\n          <Grid item>\r\n            <AmountInput\r\n              value={firstCurrencyAmount}\r\n              valueSetter={setFirstCurrencyAmount}\r\n              activeInput=\"first\"\r\n              setActiveInput={setActiveInput}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <NameInput whichSelect=\"first\" />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container spacing={4} justify=\"center\" alignItems=\"center\">\r\n          <Grid item>\r\n            <AmountInput\r\n              value={secondCurrencyAmount}\r\n              valueSetter={setSecondCurrencyAmount}\r\n              activeInput=\"second\"\r\n              setActiveInput={setActiveInput}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <NameInput whichSelect=\"second\" />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {currenciesRates ? (\r\n        <RatioBox rates={currenciesRates} />\r\n      ) : (\r\n        <CircularProgress color=\"secondary\" thickness={5} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    firstCurrencyName: state.firstCurrencyName,\r\n    secondCurrencyName: state.secondCurrencyName,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Converter);\r\n","import React, { useState } from 'react';\r\nimport { Tab, Tabs, makeStyles, withStyles } from '@material-ui/core';\r\n\r\ninterface IProps {\r\n  setDateSpan: (span: number) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#434C60',\r\n  },\r\n  indicator: {\r\n    backgroundColor: '#B7BECD',\r\n  },\r\n});\r\n\r\nconst MyTab = withStyles({\r\n  root: {\r\n    color: '#aaa',\r\n  },\r\n  selected: {\r\n    color: '#B7BECD',\r\n  },\r\n})(Tab);\r\n\r\nconst DateSpanBar: React.FC<IProps> = ({ setDateSpan }) => {\r\n  const [spanSelectActive, setSpanSelectActive] = useState(3);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Tabs\r\n      classes={{\r\n        root: classes.root,\r\n        indicator: classes.indicator,\r\n      }}\r\n      value={spanSelectActive}\r\n      onChange={(event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setSpanSelectActive(newValue);\r\n      }}\r\n    >\r\n      <MyTab label=\"1 month\" onClick={() => setDateSpan(1)} />\r\n      <MyTab label=\"3 months\" onClick={() => setDateSpan(3)} />\r\n      <MyTab label=\"6 months\" onClick={() => setDateSpan(6)} />\r\n      <MyTab label=\"1 year\" onClick={() => setDateSpan(12)} />\r\n      <MyTab label=\"5 years\" onClick={() => setDateSpan(50)} />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default DateSpanBar;\r\n","import { connect } from 'react-redux';\r\nimport { IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { SwapHoriz } from '@material-ui/icons';\r\n\r\nimport { AppState } from '../../../store';\r\nimport { setFirstCurrencyName, setSecondCurrencyName } from '../../../store/actions';\r\nimport { renderCurrenciesNames } from '../../../utils/utils';\r\n\r\ninterface IProps {\r\n  firstCurrencyName: string;\r\n  setFirstCurrencyName: (name: string) => void;\r\n  secondCurrencyName: string;\r\n  setSecondCurrencyName: (name: string) => void;\r\n  currenciesNames: {\r\n    [key: string]: string;\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  selectRoot: {\r\n    width: 200,\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#888',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#F7B05B',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#F7B05B',\r\n        borderWidth: 1,\r\n      },\r\n    },\r\n    '& .MuiSelect-outlined': {\r\n      fontWeight: 700,\r\n    },\r\n  },\r\n  buttonRoot: {\r\n    color: 'orange',\r\n  },\r\n});\r\n\r\nconst CurrenciesSelect: React.FC<IProps> = ({\r\n  firstCurrencyName,\r\n  setFirstCurrencyName,\r\n  secondCurrencyName,\r\n  setSecondCurrencyName,\r\n  currenciesNames,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const swapCurrencyNames = () => {\r\n    setFirstCurrencyName(secondCurrencyName);\r\n    setSecondCurrencyName(firstCurrencyName);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        select\r\n        value={firstCurrencyName}\r\n        onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\r\n          setFirstCurrencyName(event.target.value as string);\r\n        }}\r\n        variant=\"outlined\"\r\n        classes={{\r\n          root: classes.selectRoot,\r\n        }}\r\n      >\r\n        {renderCurrenciesNames('first', currenciesNames, firstCurrencyName, secondCurrencyName)}\r\n      </TextField>\r\n\r\n      <IconButton onClick={swapCurrencyNames} classes={{ root: classes.buttonRoot }}>\r\n        <SwapHoriz />\r\n      </IconButton>\r\n\r\n      <TextField\r\n        select\r\n        value={secondCurrencyName}\r\n        onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\r\n          setSecondCurrencyName(event.target.value as string);\r\n        }}\r\n        variant=\"outlined\"\r\n        classes={{\r\n          root: classes.selectRoot,\r\n        }}\r\n      >\r\n        {renderCurrenciesNames('second', currenciesNames, firstCurrencyName, secondCurrencyName)}\r\n      </TextField>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    currenciesNames: state.currenciesNames,\r\n    firstCurrencyName: state.firstCurrencyName,\r\n    secondCurrencyName: state.secondCurrencyName,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setFirstCurrencyName,\r\n  setSecondCurrencyName,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrenciesSelect);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CircularProgress, Container, makeStyles } from '@material-ui/core';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { connect } from 'react-redux';\r\n\r\nimport DateSpanBar from './subcomponents/DateSpanBar';\r\nimport CurrenciesSelect from './subcomponents/CurrenciesSelect';\r\n\r\nimport { fetchTimeSeries } from '../../api';\r\nimport { AppState } from '../../store';\r\n\r\ninterface IProps {\r\n  firstCurrencyName: string;\r\n  secondCurrencyName: string;\r\n}\r\n\r\ninterface TimeSeries {\r\n  date: string;\r\n  rate: number;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  containerRoot: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: 'calc(100vh - 72px)',\r\n    maxWidth: 1000,\r\n    margin: '0 auto',\r\n  },\r\n  chartWrapperRoot: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n    margin: '5vh 0 8vh 0',\r\n  },\r\n});\r\n\r\nconst Charts: React.FC<IProps> = ({ firstCurrencyName, secondCurrencyName }) => {\r\n  const [dataSeries, setDataSeries] = useState<TimeSeries[]>();\r\n  const [dateSpan, setDateSpan] = useState(12);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const fetchedDataSeries = await fetchTimeSeries(\r\n        firstCurrencyName,\r\n        secondCurrencyName,\r\n        dateSpan\r\n      );\r\n\r\n      setDataSeries(fetchedDataSeries);\r\n    })();\r\n  }, [firstCurrencyName, secondCurrencyName, dateSpan]);\r\n\r\n  const chart = () => {\r\n    return dataSeries ? (\r\n      <Line\r\n        data={{\r\n          labels: dataSeries.map((data: TimeSeries) => data.date),\r\n          datasets: [\r\n            {\r\n              data: dataSeries.map((data: TimeSeries) => data.rate),\r\n              label: 'Ratio',\r\n              borderColor: '#EFA00B',\r\n              backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: `${firstCurrencyName} to ${secondCurrencyName} chart`,\r\n            fontSize: 24,\r\n            fontColor: '#999',\r\n          },\r\n          legend: {\r\n            display: false,\r\n          },\r\n          tooltips: {\r\n            mode: 'nearest',\r\n            intersect: false,\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                ticks: {\r\n                  maxTicksLimit: 10,\r\n                  labelOffset: 25,\r\n                  maxRotation: 25,\r\n                  fontColor: '#999',\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  fontColor: '#999',\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n      ></Line>\r\n    ) : (\r\n      <CircularProgress color=\"secondary\" size={80} />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container classes={{ root: classes.containerRoot }}>\r\n      <DateSpanBar setDateSpan={setDateSpan} />\r\n\r\n      <Container classes={{ root: classes.chartWrapperRoot }}>{chart()}</Container>\r\n\r\n      <CurrenciesSelect />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    firstCurrencyName: state.firstCurrencyName,\r\n    secondCurrencyName: state.secondCurrencyName,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Charts);\r\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Container, makeStyles } from '@material-ui/core';\n\nimport Nav from './components/Nav/Nav';\nimport Converter from './components/Converter/Converter';\nimport Charts from './components/Charts/Charts';\n\nimport { fetchCurrenciesNames } from './api';\n\nimport { AppState } from './store';\nimport { setCurrenciesNames } from './store/actions';\n\ninterface Names {\n  [key: string]: string;\n}\n\ninterface IProps {\n  currenciesNames: Names;\n  setCurrenciesNames: (list: Names | undefined) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    maxWidth: '100vw',\n    height: 'calc(100vh - 72px)',\n    margin: '0 auto',\n    backgroundColor: '#3a4253',\n  },\n});\n\nconst App: React.FC<IProps> = ({ currenciesNames, setCurrenciesNames }) => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    (async () => {\n      const fetchedData = await fetchCurrenciesNames();\n\n      setCurrenciesNames(fetchedData);\n    })();\n  }, [setCurrenciesNames]);\n\n  return (\n    <BrowserRouter>\n      <>\n        <Nav />\n        <Redirect exact from=\"/\" to=\"/converter\" />\n        <Container classes={{ root: classes.root }}>\n          <Route path=\"/converter\" render={() => (currenciesNames ? <Converter /> : null)} />\n          <Route path=\"/charts\" render={() => (currenciesNames ? <Charts /> : null)} />\n        </Container>\n      </>\n    </BrowserRouter>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    currenciesNames: state.currenciesNames,\n  };\n};\n\nconst mapDispatchToProps = {\n  setCurrenciesNames,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CurrenciesGlobalState,\r\n  CurrenciesGlobalStateActionTypes,\r\n  SET_CURRENCIES_NAMES,\r\n  SET_FIRST_CURRENCY_NAME,\r\n  SET_SECOND_CURRENCY_NAME,\r\n} from './types';\r\n\r\nconst initialState: CurrenciesGlobalState = {\r\n  currenciesNames: {\r\n    USD: 'United States Dollar',\r\n    EUR: 'Euro',\r\n  },\r\n  firstCurrencyName: 'USD',\r\n  secondCurrencyName: 'EUR',\r\n};\r\n\r\nexport const currencyReducer = (state = initialState, action: CurrenciesGlobalStateActionTypes) => {\r\n  switch (action.type) {\r\n    case SET_CURRENCIES_NAMES:\r\n      return {\r\n        ...state,\r\n        currenciesNames: action.currenciesNames,\r\n      };\r\n    case SET_FIRST_CURRENCY_NAME:\r\n      return {\r\n        ...state,\r\n        firstCurrencyName: action.firstCurrencyName,\r\n      };\r\n    case SET_SECOND_CURRENCY_NAME:\r\n      return {\r\n        ...state,\r\n        secondCurrencyName: action.secondCurrencyName,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\n\nimport { configureStore } from './store';\n\nimport './index.module.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <React.StrictMode> */}\n    <App />\n    {/* </React.StrictMode> */}\n  </Provider>,\n  document.getElementById('root')\n);\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { currencyReducer } from './reducer';\r\n\r\nexport type AppState = ReturnType<typeof currencyReducer>;\r\n\r\nexport const configureStore = () => {\r\n  const store = createStore(currencyReducer, composeWithDevTools());\r\n\r\n  return store;\r\n};\r\n"],"sourceRoot":""}